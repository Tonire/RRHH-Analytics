@model MVCApp.Models.InstalacionModel

@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>iManager | Instalación</title>
    <!-- Tell the browser to be responsive to screen width -->
    <meta content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no" name="viewport">
    <!-- Bootstrap 3.3.5 -->
    <link rel="stylesheet" href="../../Content/bootstrap.min.css">
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css">
    <!-- Ionicons -->
    <link rel="stylesheet" href="https://code.ionicframework.com/ionicons/2.0.1/css/ionicons.min.css">
    <!-- Theme style -->
    <link rel="stylesheet" href="../../Content/AdminLTE/AdminLTE.min.css">
    <!-- AdminLTE Skins. Choose a skin from the css/skins
         folder instead of downloading all of them to reduce the load. -->
    <link rel="stylesheet" href="../../Content/AdminLTE/skins/_all-skins.min.css">
    <link rel="stylesheet" href="../../Scripts/AdminLTE/plugins/iCheck/square/blue.css">



    <script>
        function iniciar() {
        
            document.getElementById('apariencia').style.display = "none";
        }
    </script>
    <link rel="stylesheet" href="../../Content/animate.css">
</head>
<body onload="iniciar();" class="hold-transition register-page ">
    <div class="register-box">
        @using (Html.BeginForm("", "Instalacion", FormMethod.Post, new { enctype = "multipart/form-data" }))
        {
            @Html.AntiForgeryToken()
            @Html.ValidationSummary(true)



    <div class="register-logo animated fadeInRightBig">
        <b>iManager</b>
    </div>
    <div id="datos" class="register-box-body animated slideInLeft">
        <p class="login-box-msg animated flipInX">Datos Personales</p>
        <div class="form-group has-feedback animated flipInX">
            @Html.TextBoxFor(model => model.SiteName, null, new { @class = "form-control", placeholder = "Nombre del sitio" })
            <span class="glyphicon glyphicon-home form-control-feedback"></span>
            @Html.ValidationMessageFor(model => model.SiteName, null, new { @class = "text-danger" })

        </div>

        <div class="form-group has-feedback animated flipInX">
            @Html.TextBoxFor(model => model.UserName, null, new { @class = "form-control", placeholder = "Nombre del Super-Usuario" })
            <span class="glyphicon glyphicon-chevron-left form-control-feedback"></span>
            @Html.ValidationMessageFor(model => model.UserName, null, new { @class = "text-danger" })
        </div>

        <div class="form-group has-feedback animated flipInX">

            @Html.TextBoxFor(model => model.UserLastName, null, new { @class = "form-control", placeholder = "Apellido del Super-Usuario" })
            <span class="glyphicon glyphicon-chevron-left form-control-feedback"></span>
            @Html.ValidationMessageFor(model => model.UserLastName, null, new { @class = "text-danger" })
        </div>

        <div class="form-group has-feedback animated flipInX">
            @Html.TextBoxFor(model => model.DNI, null, new { @class = "form-control", placeholder = "DNI" })
            <span class="glyphicon glyphicon-chevron-left form-control-feedback"></span>
            @Html.ValidationMessageFor(model => model.DNI, null, new { @class = "text-danger" })
        </div>

        <div class="form-group has-feedback animated flipInX">
            @Html.TextBoxFor(model => model.UserEmail, null, new { @class = "form-control", placeholder = "Email del Super-Usuario" })
            <span class="glyphicon glyphicon-envelope form-control-feedback"></span>
            @Html.ValidationMessageFor(model => model.UserEmail, null, new { @class = "text-danger" })
        </div>

        <div class="form-group has-feedback animated flipInX">
            @Html.PasswordFor(model => model.Password, new { @class = "form-control", placeholder = "Contraseña" })
            <span class="glyphicon glyphicon-lock form-control-feedback"></span>
            @Html.ValidationMessageFor(model => model.Password, null, new { @class = "text-danger" })
        </div>

        <div class="form-group has-feedback animated flipInX">
            @Html.PasswordFor(model => model.ConfirmPassword, new { @class = "form-control", placeholder = "Contraseña" })
            <span class="glyphicon glyphicon-log-in form-control-feedback"></span>
            @Html.ValidationMessageFor(model => model.ConfirmPassword, null, new { @class = "text-danger" })
        </div>
        <div class="row">

            <div class="col-xs-12">
                <button type="button" onclick="cambiar();" class="btn btn-success btn-block btn-flat">Siguiente</button>
            </div>
        </div>
    </div>

    <div id="apariencia" class="register-box-body" style="display:none">
        <p class="login-box-msg">Apariencia</p>
        <div class="form-group has-feedback">
            <label for="file">Logo personalizado</label>
            <input id="file" type="file" name="file" />
            @Html.ValidationMessageFor(model => model.SiteLogo, null, new { @class = "text-danger" })
        </div>

        <div class="form-group has-feedback">
            @{
            List<SelectListItem> listItems = new List<SelectListItem>();
            listItems.Add(new SelectListItem {
                Text = "Azul",
                Value = "0",
                Selected = true
            });
            listItems.Add(new SelectListItem {
                Text = "Negro",
                Value = "1"
            });
            listItems.Add(new SelectListItem {
                Text = "Violeta",
                Value = "2"
            });
            listItems.Add(new SelectListItem {
                Text = "Verde",
                Value = "3"
            });
            listItems.Add(new SelectListItem {
                Text = "Rojo",
                Value = "4"
            });
            listItems.Add(new SelectListItem {
                Text = "Amarillo",
                Value = "5"
            });
            }
            <label for="file">Color Super</label>
            @Html.DropDownListFor(model => model.SuperColor, listItems, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.SuperColor, "", new { @class = "text-danger" })

        </div>

        <div class="form-group has-feedback">
            <label for="file">Color Admin</label>
            @Html.DropDownListFor(model => model.AdminColor, listItems, new { @class = "form-control", placeholder = "Color del Tema del Administrador" })
            @Html.ValidationMessageFor(model => model.AdminColor, null, new { @class = "text-danger" })
        </div>

        <div class="form-group has-feedback">
            <label for="file">Color Empleado</label>
            @Html.DropDownListFor(model => model.EmplColor, listItems, new { @class = "form-control", placeholder = "Color del Tema del Empleado" })
            @Html.ValidationMessageFor(model => model.EmplColor, null, new { @class = "text-danger" })
        </div>

        <div class="row">

            <div class="col-xs-6">
                <button type="button" onclick="cambiar();" class="btn btn-success btn-block btn-flat">Atras</button>
                </div>
                <div class="col-xs-6">

                    <button type="submit" class="btn btn-primary btn-block btn-flat">Finalizar</button>
                </div>
            </div>

    </div>
        }

    </div>
    @Scripts.Render("~/bundles/jqueryval")
    @* Bundles assume jquery 2.1.3 and Bootstrap 3 *@
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")
    <script>
        $(document).ready(function () {
            $('.input-validation-error').parents('.form-group').addClass('has-error');
            $('.field-validation-error').addClass('text-danger');
        });
    </script>
    <script>
        $(document).ready(function () {
            var form = $('#userForm')
                , formData = $.data(form[0])
                , settings = formData.validator.settings
                // Store existing event handlers in local variables
                , oldErrorPlacement = settings.errorPlacement
                , oldSuccess = settings.success;

            settings.errorPlacement = function (label, element) {

                // Call old handler so it can update the HTML
                oldErrorPlacement(label, element);

                // Add Bootstrap classes to newly added elements
                label.parents('.form-group').addClass('has-error');
                label.addClass('text-danger');
            };

            settings.success = function (label) {
                // Remove error class from <div class="form-group">, but don't worry about
                // validation error messages as the plugin is going to remove it anyway
                label.parents('.form-group').removeClass('has-error');

                // Call old handler to do rest of the work
                oldSuccess(label);
            };
        });
    </script>
    <script type="text/javascript" src="../../Scripts/instalacion.js"></script>
</body>
</html>
